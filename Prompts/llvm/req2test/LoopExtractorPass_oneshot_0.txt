### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code.

# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>

static int varargs_func(int x, ...) {
  int result = 10;
  if (x % 2) {
    result = x * 32 + 15;
  } else {
    result = x - 15;
  }
  if (x > 100) {
    result = result * 2;
  } else {
    result = result * 2;
  }
  return result;
}

int main() {
  int result = 0;
  int a = (1 << 31);
  std::vector<int> vec = {0, 1, 2, 3};
  std::string str = "hello";
  vec.assign(5, 42);
  int b = varargs_func(a, 18, 25, vec[1], 1.000000, str[3]);
  result = b;
  return result;
}
```
# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value.

# Description of requirements

The C++ code should contain the following pattern:

```cpp
int main() {
    // Declare some variables
    int x = ANY_VALUE;
    int y = ANY_VALUE;
    int z = ANY_VALUE;

    // A loop that can be extracted
    for (int i = 0; i < x; ++i) {
        // Some operations inside the loop
        y = y + z;
        z = z + i;
    }

    return y;
}
```

This pattern characterizes scenarios where within the `main` function, there exists a loop that can be extracted. The loop must have a condition that can be evaluated at runtime, and the loop body should contain some operations that modify the variables declared outside the loop. The `main` function must return a value related to this optimization for further comparison. The loop must not contain any function calls or other loops nested within it. The loop must be a top-level loop, meaning it is not nested within any other loops. The loop must not contain any break or continue statements. The loop must not contain any return statements. The loop must not contain any goto statements. The loop must not contain any exceptions or try/catch blocks. The loop must not contain any switch statements. The loop must not contain any volatile variables. The loop must not contain any assembly code. The loop must not contain any synchronization primitives such as mutexes or condition variables. The loop must not contain any I/O operations such as reading from or writing to files or the console. The loop must not contain any dynamic memory allocation or deallocation. The loop must not contain any static or global variables. The loop must not contain any lambda expressions or function pointers. The loop must not contain any template code. The loop must not contain any type casting. The loop must not contain any bitwise operations. The loop must not contain any floating point operations. The loop must not contain any complex numbers or other non-standard types. The loop must not contain any preprocessor directives. The loop must not contain any attributes or pragmas. The loop must not contain any inline assembly. The loop must not contain any undefined behavior. The loop must not contain any non-deterministic behavior. The loop must not contain any multi-threading or concurrency. The loop must not contain any recursion. The loop must not contain any indirect function calls. The loop must not contain any variadic functions. The loop must not contain any setjmp or longjmp calls. The loop must not contain any signal handling. The loop

# C++ Code begins
